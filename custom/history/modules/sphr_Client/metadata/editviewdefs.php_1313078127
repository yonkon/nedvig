<?php
$module_name = 'sphr_Client';
$viewdefs [$module_name] = 
array (
  'EditView' => 
  array (
    'templateMeta' => 
    array (
      'maxColumns' => '2',
      'widths' => 
      array (
        0 => 
        array (
          'label' => '10',
          'field' => '30',
        ),
        1 => 
        array (
          'label' => '10',
          'field' => '30',
        ),
      ),
      'javascript' => '
	  {literal}
	  <script type="text/javascript" src="custom/include/javascript/sphere_modules_editviews.js"></script>
	  <script type="text/javascript">
	  var MsgStr= new Object();
	  {/literal}
	  //Массив констант для вывода сообщений
	   MsgStr["ERR_PHONE_NEED"]="{$MOD.ERR_PHONE_NEED}";
	   MsgStr["ERR_PHONE_LENGTH"]="{$MOD.ERR_PHONE_LENGTH}";
	   MsgStr["ERR_EMAIL"]="{$MOD.ERR_EMAIL}";
	   MsgStr["ERR_DESCRIPTION_STATUS_NEED"]="{$MOD.ERR_DESCRIPTION_STATUS_NEED}";
	   MsgStr["ERR_PASSPORT_SERIES_LENGTH"]="{$MOD.ERR_PASSPORT_SERIES_LENGTH}";
	   MsgStr["ERR_PASSPORT_NUMBER_LENGTH"]="{$MOD.ERR_PASSPORT_NUMBER_LENGTH}";
	   MsgStr["ERR_PASSPORT_ISSUE_DATE"]="{$MOD.ERR_PASSPORT_ISSUE_DATE}";
	   MsgStr["ERR_SLASH_NEED"]="{$MOD.ERR_SLASH_NEED}";
	   
	   MsgStr["LBL_PHONE_MOBILE"]="{$MOD.LBL_PHONE_MOBILE}";
	   MsgStr["LBL_PHONE_HOME"]="{$MOD.LBL_PHONE_HOME}";
	   MsgStr["LBL_PHONE_WORK"]="{$MOD.LBL_PHONE_WORK}";
	   MsgStr["LBL_EMAIL_ADDRESS"]="{$MOD.LBL_EMAIL_ADDRESS}";
	   MsgStr["LBL_STATUS_DESCRIPTION"]="{$MOD.LBL_STATUS_DESCRIPTION}";
	   MsgStr["LBL_PASSPORT_SERIES"]="{$MOD.LBL_PASSPORT_SERIES}";
	   MsgStr["LBL_PASSPORT_NUMBER"]="{$MOD.LBL_PASSPORT_NUMBER}";
	   MsgStr["LBL_PASSPORT_ISSUE_DATE"]="{$MOD.LBL_PASSPORT_ISSUE_DATE}";
	   MsgStr["LBL_PHONE"]="{$MOD.LBL_PHONE}";
	   MsgStr["LBL_INN_AND_KPP"]="{$MOD.LBL_INN_AND_KPP}";
	   
      {literal}
	    

		function checkPhones() //функция установки обязательности и проверки телефонных номеров
		{	
			//проверка на заполненность хотя бы одного телефона
			var Err = false;
			if ((ElementValueLength("phone_home") == 0) && (ElementValueLength("phone_work") == 0) && (ElementValueLength("phone_mobile") == 0)) Err = true; 	
			for (var i = 0; i < validate["EditView"].length; i++)
			{
				if (validate["EditView"][i][nameIndex] == "phone_home" || validate["EditView"][i][nameIndex] == "phone_mobile" || validate["EditView"][i][nameIndex] == "phone_work")
				{
					if (Err) //если ни один телефон не заполнен
					{
						validate["EditView"][i][typeIndex] = "error";
						validate["EditView"][i][msgIndex] = MsgStr["ERR_PHONE_NEED"];
					} else {
						validate["EditView"][i][typeIndex] = "int";
						switch(validate["EditView"][i][nameIndex])
						{
							case "phone_home": validate["EditView"][i][msgIndex] =  MsgStr["LBL_PHONE_HOME"]; break;
							case "phone_mobile": validate["EditView"][i][msgIndex] =  MsgStr["LBL_PHONE_MOBILE"]; break;
							case "phone_work": validate["EditView"][i][msgIndex] =  MsgStr["LBL_PHONE_WORK"]; break;
						}
					};
				}
			}	
			if (!Err) //проверка длины будет происходить, если предыдущая проверка прошла успешно
			{
				for (var i = 0; i < validate["EditView"].length; i++)
				{
					if (validate["EditView"][i][nameIndex] == "phone_home" || validate["EditView"][i][nameIndex] == "phone_mobile" || validate["EditView"][i][nameIndex] == "phone_work")
					{
						//alert((validate["EditView"][i][nameIndex])+"!"+document.getElementById(validate["EditView"][i][nameIndex]).value+"!"+ElementValueLength(validate["EditView"][i][nameIndex]));
						if ((ElementValueLength(validate["EditView"][i][nameIndex])!=0) && (ElementValueLength(validate["EditView"][i][nameIndex])!=11))
						{
							Err=true; 
							validate["EditView"][i][typeIndex] = "error";
							validate["EditView"][i][msgIndex]=MsgStr["ERR_PHONE_LENGTH"];
						} else {
							Err=false; 
							validate["EditView"][i][typeIndex] = "int";
							switch(validate["EditView"][i][nameIndex])
							{
								case "phone_home": validate["EditView"][i][msgIndex] =  MsgStr["LBL_PHONE_HOME"]; break;
								case "phone_mobile": validate["EditView"][i][msgIndex] =  MsgStr["LBL_PHONE_MOBILE"]; break;
								case "phone_work": validate["EditView"][i][msgIndex] =  MsgStr["LBL_PHONE_WORK"]; break;
							}
						}
					}
				}
			}
		}	
		
		
		function checkPassport() //функция проверки паспортных данных
		{
			var i=GetValidateIndex("passport_series"); 
			if (i!=-1) 
			{
				if ((ElementValueLength(validate["EditView"][i][nameIndex])!=0) && (ElementValueLength(validate["EditView"][i][nameIndex])!=4))
				{
					validate["EditView"][i][typeIndex] = "error";
					validate["EditView"][i][msgIndex]=MsgStr["ERR_PASSPORT_SERIES_LENGTH"];
				} else {
					validate["EditView"][i][typeIndex] = "int";
					validate["EditView"][i][msgIndex]=MsgStr["LBL_PASSPORT_SERIES"];
				}
			}
			var i=GetValidateIndex("passport_number");
			if (i!=-1) 
			{
				if ((ElementValueLength(validate["EditView"][i][nameIndex])!=0) && (ElementValueLength(validate["EditView"][i][nameIndex])!=6))
				{					
					validate["EditView"][i][typeIndex] = "error";
					validate["EditView"][i][msgIndex]=MsgStr["ERR_PASSPORT_NUMBER_LENGTH"];
				} else {
					validate["EditView"][i][typeIndex] = "int";
					validate["EditView"][i][msgIndex]=MsgStr["LBL_PASSPORT_NUMBER"];
				}			
			}
			var i=GetValidateIndex("passport_issue_date");
			if (i!=-1)
			{
				date1=document.getElementById("passport_issue_date").value;
				if (trim(date1).length!=0)
				{
					var date2=new Date(); //получаем текущую дату
					if (getDateObject(date1)>=date2)  //сравниваем ее с датой в поле "дата выдачи"
					{
						validate["EditView"][i][typeIndex] = "error";
						validate["EditView"][i][msgIndex]=MsgStr["ERR_PASSPORT_ISSUE_DATE"];
					} else {
						validate["EditView"][i][typeIndex] = "date";
						validate["EditView"][i][msgIndex]=MsgStr["LBL_PASSPORT_ISSUE_DATE"];
					}			
				}
			}
		}

		function checkStatus() //функция установки обязательности описания статуса 
		{
			var i=GetValidateIndex("status_description");
			if (i==-1) return;
			//alert (("!"+document.getElementById("status").value+"!"));
			if (document.getElementById("status").value == "denial") //если статус "в отказе"
			{
				validate["EditView"][i][requiredIndex] = true;
				validate["EditView"][i][msgIndex]=MsgStr["ERR_DESCRIPTION_STATUS_NEED"];
			} else {
				validate["EditView"][i][requiredIndex] = false;
				validate["EditView"][i][msgIndex]=MsgStr["LBL_STATUS_DESCRIPTION"];
			}
		}

		
		function checkRequisites() //функция проверки реквизитов для юридического лица
		{
			var i=GetValidateIndex("phone_c");
			if (i!=-1)
			{
				if ((ElementValueLength(validate["EditView"][i][nameIndex])!=0) && (ElementValueLength(validate["EditView"][i][nameIndex])!=11))
				{
					validate["EditView"][i][typeIndex] = "error";
					validate["EditView"][i][msgIndex]=MsgStr["ERR_PHONE_LENGTH"];
				} else {
					validate["EditView"][i][typeIndex] = "int";
					validate["EditView"][i][msgIndex]=MsgStr["LBL_PHONE"];
				}
			}
			checkINNandKPP();
		}
		
		function checkRegistrationType() //функция установки обязательности адресов постоянной и временной регистрации
		{
			if (document.getElementById("type_c").value=="individual") //если установлен тип клиента - "физическое лицо"
			{
				for (var i = 0; i < validate["EditView"].length; i++)
				{
					switch (validate["EditView"][i][nameIndex]) //в зависимости от выбранного типа регистрации - устанавливается обязательность нужного адреса
					{
						case "address_temporary":
							validate["EditView"][i][requiredIndex] = (document.getElementById("address_registration_type_c").value == "temporary");
							break;
						case "address_permanent":
							validate["EditView"][i][requiredIndex] = (document.getElementById("address_registration_type_c").value == "permanent");
							break;	
					}
				}
			} else { //если установлен тип клиента - "юридическое лицо", то адреса постоянной и временной регистрации необязательны
				for (var i = 0; i < validate["EditView"].length; i++)
				{
					if ((validate["EditView"][i][nameIndex] == "address_temporary") || (validate["EditView"][i][nameIndex] == "address_permanent"))
						validate["EditView"][i][requiredIndex]=false;
				}
			}
		}
		
		function checkClientType() //функция установки обязательности паспортных данных или реквизитов юридического лица
		{
			switch (document.getElementById("type_c").value)
			{
				case "individual": //если установлен тип клиента - "физическое лицо"
					var AddressActualRequiredSet=false; //для предотвращения двойной установки элемента "requiredIndex" элемента "address_actual" массива validate; необходимо для предотвращения дублирования сообщения об обязательности заполнения поля "фактический адрес проживания"
					for (var i = 0; i < validate["EditView"].length; i++)
					{
						//устанавливаем обязательность заполнения обязательных полей
						if ((validate["EditView"][i][nameIndex] == "passport_series") || (validate["EditView"][i][nameIndex] == "passport_number") ||
						    (validate["EditView"][i][nameIndex] == "passport_issue_date")	|| (validate["EditView"][i][nameIndex] == "passport_issued") ||
							(validate["EditView"][i][nameIndex] == "title"))
								validate["EditView"][i][requiredIndex]=true;
						if 	(validate["EditView"][i][nameIndex] == "address_actual") 
						{
							if (!AddressActualRequiredSet) //если элемент "requiredIndex" элемента "address_actual" массива validate не установлен
							{
								validate["EditView"][i][requiredIndex]=true;
								AddressActualRequiredSet=true;
							}
						}
						checkRegistrationType(); 
						//убираем обязательность заполнения необязательных полей
						if ((validate["EditView"][i][nameIndex] == "full_name") || (validate["EditView"][i][nameIndex] == "addressl_legal") ||
						(validate["EditView"][i][nameIndex] == "addressl_actual")	|| (validate["EditView"][i][nameIndex] == "phone_c") ||
						(validate["EditView"][i][nameIndex] == "inn_and_kpp") || (validate["EditView"][i][nameIndex] == "account_and_bank") ||
						(validate["EditView"][i][nameIndex] == "name_general_director")) 
							validate["EditView"][i][requiredIndex]=false;
					}
					with (document) 
					{
						//показывем нужный блок
						getElementById("LBL_PASSPORT_DATA").style.display="block";
						getElementById("LBL_REQUISITES").style.display="none";
						/* 
						//стираем значения полей в скрытом блоке
						getElementById("lgl_name").value="";
						getElementById("lgl_address_actual").value="";
						getElementById("lgl_address_legal").value="";
						getElementById("phone_c").value="";
						getElementById("inn_and_kpp").value="";
						getElementById("account_and_bank").value="";
						getElementById("name_general_director").value="";
						*/
					} 
					break;
				case "legal": //если установлен тип клиента - "юридическое лицо"
					for (var i = 0; i < validate["EditView"].length; i++)
					{
						//устанавливаем обязательность заполнения обязательных полей
						if ((validate["EditView"][i][nameIndex] == "full_name") || (validate["EditView"][i][nameIndex] == "addressl_legal") ||
						    (validate["EditView"][i][nameIndex] == "addressl_actual")	|| (validate["EditView"][i][nameIndex] == "phone_c") ||
							(validate["EditView"][i][nameIndex] == "inn_and_kpp") || (validate["EditView"][i][nameIndex] == "account_and_bank") ||
							(validate["EditView"][i][nameIndex] == "name_general_director")) 
								validate["EditView"][i][requiredIndex]=true;
						//убираем обязательность заполнения необязательных полей
						if ((validate["EditView"][i][nameIndex] == "passport_series") || (validate["EditView"][i][nameIndex] == "passport_number") ||
						    (validate["EditView"][i][nameIndex] == "passport_issue_date")	|| (validate["EditView"][i][nameIndex] == "passport_issued") ||
							(validate["EditView"][i][nameIndex] == "title") || (validate["EditView"][i][nameIndex] == "address_actual"))
								validate["EditView"][i][requiredIndex]=false;
						checkRegistrationType();
					}
					with (document)
					{
						//показывем нужный блок
						getElementById("LBL_PASSPORT_DATA").style.display="none";
						getElementById("LBL_REQUISITES").style.display="block";
						/* 
						//стираем значения полей в скрытом блоке
						getElementById("passport_series").value="";
						getElementById("passport_number").value="";
						getElementById("passport_issue_date").value="";
						getElementById("passport_issued").value="";
						getElementById("address_actual").value="";
						getElementById("title").value="";
						getElementById("address_temporary").value="";
						getElementById("address_permanent").value="";
						*/
					} 
					break;
			}
		}
		
		function copyNames() //функця копирования ФИО в блок паспортных данных
		{
			if (document.getElementById("type_c").value != "individual") return; //выход, если тип клиента - не физическое лицо
			document.getElementById("passport_first_name").value=document.getElementById("first_name").value;
			//str.indexOf("");
			//str.substring(indexA, [indexB]);
			var wrds=document.getElementById("last_and_middle_name").value.split(" ");
			document.getElementById("passport_last_name").value=wrds[0];
			if (typeof(wrds[1])!="undefined") document.getElementById("passport_middle_name").value=wrds[1];
			//alert(wrds);			
		}
	
		//Добавление полей на проверку и вызов функция проверки (для проверки обязательности и корректности введенных значений
		addToValidate(\'EditView\', \'phone_mobile\', \'int\', false,  MsgStr["LBL_PHONE_MOBILE"] );
		addToValidate(\'EditView\', \'phone_work\', \'int\', false,  MsgStr["LBL_PHONE_WORK"] );
		addToValidate(\'EditView\', \'phone_home\', \'int\', false,  MsgStr["LBL_PHONE_HOME"] );
		checkPhones();
		
		addToValidate(\'EditView\', \'email\', \'varchar\', false,  MsgStr["LBL_EMAIL_ADDRESS"] );
		checkEmail();
		
 		addToValidate(\'EditView\', \'status_description\', \'varchar\', false,  MsgStr["LBL_STATUS_DESCRIPTION"] );
		checkStatus();
		
		addToValidate(\'EditView\', \'passport_series\', \'int\', false,MsgStr["LBL_PASSPORT_SERIES"] );
		addToValidate(\'EditView\', \'passport_number\', \'int\', false,MsgStr["LBL_PASSPORT_NUMBER"] );
		addToValidate(\'EditView\', \'passport_issue_date\', \'date\', false,MsgStr["LBL_PASSPORT_ISSUE_DATE"] );
		checkPassport(); 
		
		addToValidate(\'EditView\', \'phone_c\', \'int\', false,MsgStr["LBL_PHONE"] );
		addToValidate(\'EditView\', \'inn_and_kpp\', \'varchar\', false,MsgStr["LBL_INN_AND_KPP"] );
		checkRequisites();

		addToValidate(\'EditView\', \'passport_foreigner_ser_and_num\', \'varchar\', false,\'Серия и номер паспорта иностранного гражданина\' );		
		addToValidate(\'EditView\', \'passport_issued\', \'varchar\', false,\'Кем выдан\' );
		addToValidate(\'EditView\', \'address_temporary\', \'varchar\', false,\'Адрес временной регистрации\' );
		addToValidate(\'EditView\', \'address_permanent\', \'varchar\', false,\'Адрес постоянной регистрации\' );
		addToValidate(\'EditView\', \'address_actual\', \'varchar\', false,\'Фактический адрес проживания\' );

		addToValidate(\'EditView\', \'full_name\', \'fullname\', false,\'Полное наименование\' );
		addToValidate(\'EditView\', \'addressl_actual\', \'varchar\', false,\'Фактический адрес\' );
		addToValidate(\'EditView\', \'addressl_legal\', \'varchar\', false,\'Юридический адрес\' );
		addToValidate(\'EditView\', \'account_and_bank\', \'varchar\', false,\'Расчетный счет, банк\' );
		addToValidate(\'EditView\', \'name_general_director\', \'varchar\', false,\'ФИО генерального директора\' );
		checkClientType();
		
							
		</script>
	  {/literal}
	',
      'useTabs' => false,
    ),
    'panels' => 
    array (
      'lbl_contact_information' => 
      array (
        0 => 
        array (
          0 => 
          array (
            'name' => 'type_c',
            'studio' => 'visible',
            'label' => 'LBL_TYPE',
            'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'checkClientType();',
              ),
            ),
          ),
          1 => '',
        ),
        1 => 
        array (
          0 => 'title',
          1 => 
          array (
            'name' => 'first_name',
            'comment' => 'First name of the contact',
            'label' => 'LBL_FIRST_NAME',
            'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'copyNames();',
              ),
            ),
          ),
        ),
        2 => 
        array (
          0 => 
          array (
            'name' => 'last_and_middle_name',
            'label' => 'LBL_LAST_AND_MIDDLE_NAME',
            'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'copyNames();',
              ),
            ),
          ),
          1 => 
          array (
            'name' => 'phone_mobile',
            'comment' => 'Mobile phone number of the contact',
            'label' => 'LBL_PHONE_MOBILE',
            'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'checkPhones();',
              ),
            ),
          ),
        ),
        3 => 
        array (
          0 => 
          array (
            'name' => 'phone_home',
            'comment' => 'Home phone number of the contact',
            'label' => 'LBL_PHONE_HOME',
            'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'checkPhones();',
              ),
            ),
          ),
          1 => 
          array (
            'name' => 'phone_work',
            'comment' => 'Work phone number of the contact',
            'label' => 'LBL_PHONE_WORK',
            'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'checkPhones();',
              ),
            ),
          ),
        ),
        4 => 
        array (
          0 => 
          array (
            'name' => 'phone_fax',
            'comment' => 'Contact fax number',
            'label' => 'LBL_PHONE_FAX',
          ),
          1 => 
          array (
            'name' => 'email',
            'label' => 'LBL_EMAIL',
            'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'checkEmail();',
              ),
            ),
          ),
        ),
        5 => 
        array (
          0 => 
          array (
            'name' => 'address_post',
            'label' => 'LBL_ADDRESS_POST',
          ),
           1 => 
          array (
            'name' => 'source',
			 'label' => 'LBL_SOURCE',
			'customCode' => '
				<select name="source" id="source" title="" tabindex="113">
				{foreach from=$ar_campaigns key=campaign_id item=campaign_value }
					<option label={$campaign_value} value={$campaign_id} 
						{if $campaign_id==$ar_campaign_id} selected="selected"{/if} 
					>{$campaign_value}</option>
				{/foreach}				
				</select>

			',
			), 
        ),
        6 => 
        array (
          0 => 
          array (
            'name' => 'assigned_user_name',
            'label' => 'LBL_ASSIGNED_TO_NAME',
            'displayParams'=>
			array(
			'required' => true, 
			),
          ),
        ),
        7 => 
        array (
          0 => 
          array (
            'name' => 'status',
            'studio' => 'visible',
            'label' => 'LBL_STATUS',
            'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'checkStatus();',
              ),
            ),
          ),
          1 => 
          array (
            'name' => 'status_description',
            'label' => 'LBL_STATUS_DESCRIPTION',
          ),
        ),
        8 => 
        array (
          0 => 
          array (
            'name' => 'sphr_intermhr_client_name',
          ),
          1 => 
          array (
            'name' => 'sphr_inspechr_client_name',
          ),
        ),
      ),
      'lbl_passport_data' => 
      array (
        0 => 
        array (
          0 => 
          array (
            'name' => 'passport_type',
            'studio' => 'visible',
            'label' => 'LBL_PASSPORT_TYPE',
          ),
          1 => 
          array (
            'name' => 'passport_last_name',
            'label' => 'LBL_PASSPORT_LAST_NAME',
			'displayParams' => array( 
				'field' => array( 
					'disabled' => 'disabled', 
				), 
			), 
          ),
        ),
        1 => 
        array (
          0 => 
          array (
            'name' => 'passport_first_name',
            'label' => 'LBL_PASSPORT_FIRST_NAME',
			'displayParams' => array( 
				'field' => array( 
					'disabled' => 'disabled', 
				), 
			), 
          ),
          1 => 
          array (
            'name' => 'passport_middle_name',
            'label' => 'LBL_PASSPORT_MIDDLE_NAME',
			'displayParams' => array( 
				'field' => array( 
					'disabled' => 'disabled', 
				), 
			), 
          ),
        ),
        2 => 
        array (
          0 => 
          array (
            'name' => 'passport_series',
            'label' => 'LBL_PASSPORT_SERIES',
            'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'checkPassport();',
              ),
            ),
          ),
          1 => 
          array (
            'name' => 'passport_number',
            'label' => 'LBL_PASSPORT_NUMBER',
            'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'checkPassport();',
              ),
            ),
          ),
        ),
        3 => 
        array (
          0 => 
          array (
            'name' => 'passport_foreigner_ser_and_num',
            'label' => 'LBL_PASSPORT_FOREIGNER_SER_AND_NUM',
          ),
        ),
        4 => 
        array (
          0 => 
          array (
            'name' => 'passport_issue_date',
            'label' => 'LBL_PASSPORT_ISSUE_DATE',
            'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'checkPassport();',
              ),
            ),
          ),
          1 => 
          array (
            'name' => 'passport_issued',
            'label' => 'LBL_PASSPORT_ISSUED',
          ),
        ),
        5 => 
        array (
          0 => 
          array (
            'name' => 'address_registration_type_c',
            'studio' => 'visible',
            'label' => 'LBL_ADDRESS_REGISTRATION_TYPE',
			'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'checkRegistrationType();',
              ),
            ),
          ),
          1 => '',
        ),
        6 => 
        array (
          0 => 
          array (
            'name' => 'address_permanent',
            'label' => 'LBL_ADDRESS_PERMANENT',
          ),
          1 => 
          array (
            'name' => 'address_temporary',
            'label' => 'LBL_ADDRESS_TEMPORARY',
          ),
        ),
        7 => 
        array (
          0 => 
          array (
            'name' => 'address_actual',
            'label' => 'LBL_ADDRESS_ACTUAL',
          ),
          1 => '',
        ),
      ),
      'lbl_requisites' => 
      array (
        0 => 
        array (
          0 => 
          array (
            'name' => 'full_name',
            'studio' => 
            array (
              'listview' => false,
            ),
            'label' => 'LBL_NAME',
          ),
          1 => 
          array (
            'name' => 'addressl_legal',
            'label' => 'LBL_ADDRESSL_LEGAL',
          ),
        ),
        1 => 
        array (
          0 => 
          array (
            'name' => 'addressl_actual',
            'label' => 'LBL_ADDRESSL_ACTUAL',
          ),
          1 => 
          array (
            'name' => 'phone_c',
            'label' => 'LBL_PHONE',
            'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'checkRequisites();',
              ),
            ),
          ),
        ),
        2 => 
        array (
          0 => 
          array (
            'name' => 'inn_and_kpp',
            'label' => 'LBL_INN_AND_KPP',
            'displayParams' => 
            array (
              'field' => 
              array (
                'onChange' => 'checkRequisites();',
              ),
            ),
          ),
          1 => 
          array (
            'name' => 'account_and_bank',
            'label' => 'LBL_ACCOUNT_AND_BANK',
          ),
        ),
        3 => 
        array (
          0 => 
          array (
            'name' => 'name_general_director',
            'label' => 'LBL_NAME_GENERAL_DIRECTOR',
          ),
          1 => '',
        ),
      ),
    ),
  ),
);
?>
